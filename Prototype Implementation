{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP94TdUQwz2wtIDfhVr93ra",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Rajendra080/1BM22AI406/blob/main/Prototype%20Implementation\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# main.py\n",
        "\n",
        "\"\"\"\n",
        "Dynamic Product Pricing MVP (Pandas Version for Local Testing)\n",
        "This version replaces PySpark with pandas for environments without Spark.\n",
        "Generates randomized product and transaction tables without third-party libraries.\n",
        "Outputs results as CSV to avoid unsupported Parquet dependencies.\n",
        "\"\"\"\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import os\n",
        "import random\n",
        "\n",
        "PRODUCTS_PATH = \"products.csv\"\n",
        "TRANSACTIONS_PATH = \"transactions.csv\"\n",
        "\n",
        "# Always generate random sample data (for demonstration)\n",
        "print(\"ðŸ”„ Generating random product and transaction data...\")\n",
        "\n",
        "# Create sample products\n",
        "categories = ['Lab Equipment', 'Chemicals', 'Protective Gear']\n",
        "products = []\n",
        "for i in range(1, 31):\n",
        "    category = random.choice(categories)\n",
        "    base_price = round(random.uniform(20, 500), 2)\n",
        "    cost = round(base_price * random.uniform(0.6, 0.9), 2)\n",
        "    products.append({\n",
        "        \"sku\": f\"SKU{i:04d}\",\n",
        "        \"name\": f\"Product{i:04d}\",\n",
        "        \"category\": category,\n",
        "        \"base_price\": base_price,\n",
        "        \"cost\": cost\n",
        "    })\n",
        "pd.DataFrame(products).to_csv(PRODUCTS_PATH, index=False)\n",
        "\n",
        "# Create sample transactions\n",
        "transactions = []\n",
        "for _ in range(300):\n",
        "    product = random.choice(products)\n",
        "    quantity = random.randint(1, 10)\n",
        "    transactions.append({\n",
        "        \"sku\": product[\"sku\"],\n",
        "        \"price_paid\": round(product[\"base_price\"] * random.uniform(0.9, 1.1), 2),\n",
        "        \"quantity\": quantity\n",
        "    })\n",
        "pd.DataFrame(transactions).to_csv(TRANSACTIONS_PATH, index=False)\n",
        "\n",
        "# Load CSVs\n",
        "products = pd.read_csv(PRODUCTS_PATH)\n",
        "transactions = pd.read_csv(TRANSACTIONS_PATH)\n",
        "\n",
        "# Convert types\n",
        "transactions[\"price_paid\"] = transactions[\"price_paid\"].astype(float)\n",
        "transactions[\"quantity\"] = transactions[\"quantity\"].astype(int)\n",
        "\n",
        "# Aggregate transaction stats\n",
        "product_stats = transactions.groupby(\"sku\").agg(\n",
        "    num_sales=(\"quantity\", \"sum\"),\n",
        "    avg_price_paid=(\"price_paid\", \"mean\")\n",
        ").reset_index()\n",
        "\n",
        "# Merge with product metadata\n",
        "df = pd.merge(products, product_stats, on=\"sku\", how=\"left\")\n",
        "df[\"base_price\"] = df[\"base_price\"].astype(float)\n",
        "df[\"cost\"] = df[\"cost\"].astype(float)\n",
        "df[\"num_sales\"] = df[\"num_sales\"].fillna(0)\n",
        "df[\"avg_price_paid\"] = df[\"avg_price_paid\"].fillna(0)\n",
        "\n",
        "# Define anchor threshold (top 20% in popularity)\n",
        "thresh = df[\"num_sales\"].quantile(0.80)\n",
        "df[\"is_anchor\"] = np.where(df[\"num_sales\"] >= thresh, 1, 0)\n",
        "\n",
        "# Compute anchor averages per category\n",
        "anchor_avg = df[df[\"is_anchor\"] == 1].groupby(\"category\")[\"avg_price_paid\"].mean().reset_index()\n",
        "anchor_avg.rename(columns={\"avg_price_paid\": \"anchor_avg_price\"}, inplace=True)\n",
        "\n",
        "# Merge back and compute suggested price\n",
        "final = pd.merge(df, anchor_avg, on=\"category\", how=\"left\")\n",
        "final[\"suggested_price\"] = np.where(\n",
        "    final[\"is_anchor\"] == 1,\n",
        "    final[\"avg_price_paid\"],\n",
        "    final[\"anchor_avg_price\"] * 0.95\n",
        ")\n",
        "\n",
        "# Select relevant columns\n",
        "result = final[[\"sku\", \"name\", \"category\", \"base_price\", \"cost\", \"num_sales\", \"is_anchor\", \"suggested_price\"]]\n",
        "\n",
        "# Save as CSV to avoid Parquet engine dependency\n",
        "os.makedirs(\"output\", exist_ok=True)\n",
        "result.to_csv(\"output/pricing_suggestions.csv\", index=False)\n",
        "\n",
        "print(\"âœ… Pricing suggestions saved to output/pricing_suggestions.csv\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uK6Em4jMlak5",
        "outputId": "1aaf694b-811e-4ca9-d0c8-78c30f64fe7d"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ðŸ”„ Generating random product and transaction data...\n",
            "âœ… Pricing suggestions saved to output/pricing_suggestions.csv\n"
          ]
        }
      ]
    }
  ]
}